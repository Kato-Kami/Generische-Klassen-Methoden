public class Kontakt : IComparable<Kontakt>
{
    public string Name { get; set; }
    public string Telefonnummer;

    public Kontakt(string name, string telefonnummer)
    {
        Name = name;
        Telefonnummer = telefonnummer;
    }

    public int CompareTo(Kontakt kontakt)
    {
        if (kontakt == null)
            return 1;
        return Name.CompareTo(kontakt.Name);
    }

    public override bool Equals(object obj)
    {
        if (obj == null || GetType() != obj.GetType()) return false;
        Kontakt other = (Kontakt)obj;
        return Name == other.Name && Telefonnummer == other.Telefonnummer;
    }

    public override int GetHashCode()
    {
        return Name.GetHashCode() ^ Telefonnummer.GetHashCode();
    }

    public override string ToString()
    {
        return $"{Name} ({Telefonnummer})";
    }
}

    public class GenericStack<T> : IEnumerable<T> where T: IComparable<T>
    {
        private class StackItem
        {
            public T Data { get; set; }
            public StackItem Nächstes { get; set; }

            public StackItem(T data)
            {
                Data = data;
                Nächstes = null;
            }
        }

        private StackItem top;

        public GenericStack()
        {
            top = null;
        }

        public void Push(T item)
        {
            var neuerGegenstand = new StackItem(item);
            neuerGegenstand.Nächstes = top;
            top = neuerGegenstand;
        }

        public T Pop()
        {
            var gegenstand = top.Data;
            top = top.Nächstes;
            return gegenstand;
        }

        public bool Contains(T item)
        {
            var current = top;
            while (current != null)
            {
                if (current.Data.CompareTo(item) == 0)
                {
                    return true;
                }
                current = current.Nächstes;
            }
            return false;
        }
        public IEnumerator<T> GetEnumerator()
        {
            var current = top;
            while (current != null)
            {
                yield return current.Data;
                current = current.Nächstes;
            }
        }
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        
    }


    
    
    class Program
    {
        static void Main(string[] args)
        {
            GenericStack<int> iStack = new GenericStack<int>();
            Console.WriteLine("5 Integer auf dem Stapel laden:");
            iStack.Push(10);
            iStack.Push(20);
            iStack.Push(30);
            iStack.Push(40);
            iStack.Push(50);

            foreach (var item in iStack)
            {
                Console.WriteLine(item);
            }
            Console.WriteLine($"\nIst das Element mit der Zahl 40 enthalten: {iStack.Contains(40)}");
           
            Console.WriteLine("\nFolgende zwei Integer werden vom Stapel genommen: ");
            try
            {
                Console.WriteLine(iStack.Pop());
                Console.WriteLine(iStack.Pop());
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine($"\nIst das Element mit der Zahl 40 noch enthalten: {iStack.Contains(40)}");

            Console.WriteLine("------------------------");

            // Test mit String-Typen
            GenericStack<string> sStack = new GenericStack<string>();
            Console.WriteLine("\n5 Strings auf den Stapel laden:");
            sStack.Push("Zehn");
            sStack.Push("Zwanzig");
            sStack.Push("Dreißig");
            sStack.Push("Vierzig");
            sStack.Push("Fünfzig");

            foreach (var item in sStack)
            {
                Console.WriteLine(item);
            }

            Console.WriteLine($"\nIst das Element mit dem Text 'Vierzig' enthalten: {sStack.Contains("Vierzig")}");

            Console.WriteLine("\nFolgende zwei Strings werden vom Stapel genommen:");
            try
            {
                Console.WriteLine(sStack.Pop());
                Console.WriteLine(sStack.Pop());
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine($"\nIst das Element mit dem Text 'Vierzig' noch enthalten: {sStack.Contains("Vierzig")}");

            Console.WriteLine("------------------------");

            // Test mit der Kontakt-Klasse
            GenericStack <Kontakt> kStack = new GenericStack<Kontakt>();
            Console.WriteLine("\n4 Kontakte auf den Stapel laden:");
            kStack.Push(new Kontakt("Hans", "10"));
            kStack.Push(new Kontakt("Peter", "20"));
            kStack.Push(new Kontakt("Friedhelm", "30"));
            kStack.Push(new Kontakt("Wolfgang", "55"));

            foreach (var item in kStack)
            {
                Console.WriteLine(item);
            }

            var targetContact = new Kontakt("Wolfgang", "55");
            Console.WriteLine($"\nIst der Kontakt zu 'Wolfgang, 55' enthalten: {kStack.Contains(targetContact)}");

            Console.WriteLine("\nFolgender Kontakt wird vom Stapel genommen:");
            try
            {
                Console.WriteLine(kStack.Pop());
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine(ex.Message);
            }

            Console.WriteLine($"\nIst der Kontakt zu 'Wolfgang, 55' noch enthalten: {kStack.Contains(targetContact)}");

            Console.WriteLine("------------------------");
        }
    }

}
